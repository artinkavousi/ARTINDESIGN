{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\r\nimport rehypePrettyCode from 'rehype-pretty-code'\r\nimport rehypeSlug from 'rehype-slug'\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\r\nimport remarkGfm from 'remark-gfm'\r\n\r\n/**\r\n * Blog Post Document Type\r\n */\r\nexport const Post = defineDocumentType(() => ({\r\n  name: 'Post',\r\n  filePathPattern: `posts/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    summary: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    publishedAt: {\r\n      type: 'date',\r\n      required: true,\r\n    },\r\n    updatedAt: {\r\n      type: 'date',\r\n      required: false,\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    templateId: {\r\n      type: 'string',\r\n      required: false,\r\n      description: 'Template component ID from registry',\r\n    },\r\n    styleId: {\r\n      type: 'string',\r\n      required: false,\r\n      description: 'Style/theme variant ID',\r\n    },\r\n    sceneProps: {\r\n      type: 'json',\r\n      required: false,\r\n      description: 'Props to pass to 3D scene',\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      required: false,\r\n    },\r\n    cover: {\r\n      type: 'string',\r\n      required: false,\r\n      description: 'Cover image URL',\r\n    },\r\n    featured: {\r\n      type: 'boolean',\r\n      required: false,\r\n      default: false,\r\n    },\r\n    draft: {\r\n      type: 'boolean',\r\n      required: false,\r\n      default: false,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (post) => `/blog/${post.slug}`,\r\n    },\r\n    readingTime: {\r\n      type: 'number',\r\n      resolve: (post) => {\r\n        const wordsPerMinute = 200\r\n        const wordCount = post.body.raw.split(/\\s+/g).length\r\n        return Math.ceil(wordCount / wordsPerMinute)\r\n      },\r\n    },\r\n  },\r\n}))\r\n\r\n/**\r\n * Lab Experiment Document Type\r\n */\r\nexport const Lab = defineDocumentType(() => ({\r\n  name: 'Lab',\r\n  filePathPattern: `labs/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    category: {\r\n      type: 'enum',\r\n      options: ['shaders', 'particles', 'compute', 'physics', 'audio'],\r\n      required: true,\r\n    },\r\n    difficulty: {\r\n      type: 'enum',\r\n      options: ['beginner', 'intermediate', 'advanced'],\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      required: false,\r\n    },\r\n    preview: {\r\n      type: 'string',\r\n      required: false,\r\n      description: 'Preview image/video URL',\r\n    },\r\n    sceneComponent: {\r\n      type: 'string',\r\n      required: true,\r\n      description: 'Path to scene component',\r\n    },\r\n    publishedAt: {\r\n      type: 'date',\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (lab) => `/labs/${lab.slug}`,\r\n    },\r\n  },\r\n}))\r\n\r\n/**\r\n * Contentlayer Configuration\r\n */\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Post, Lab],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: {\r\n            dark: 'github-dark-dimmed',\r\n            light: 'github-light',\r\n          },\r\n          keepBackground: false,\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          behavior: 'wrap',\r\n          properties: {\r\n            className: ['anchor'],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n})\r\n\r\n"],
  "mappings": "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",
  "names": []
}
