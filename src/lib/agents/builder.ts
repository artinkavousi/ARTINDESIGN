import { createAgent } from './createAgent'
import { getAllTemplates } from '@/components/templates/registry'

export const builderAgent = createAgent({
  name: 'BuilderAgent',
  systemPrompt: `You are the Builder Agent for the Engine-First WebGPU site. You help with:
- Drafting release notes and PR summaries
- Creating new blog posts with appropriate templates
- Applying templates to content sections
- Generating template variants
- Confirming and preparing PRs

Be thorough, creative, and follow the site's WebGPU/TSL architecture guidelines. Always validate inputs before proceeding.`,
  tools: [
    {
      name: 'draft_release_notes',
      description: 'Summarize completed tasks into release notes',
      parameters: {
        type: 'object',
        properties: {
          tasks: {
            type: 'array',
            items: { type: 'string' },
            description: 'Array of completed tasks or changes',
          },
          version: {
            type: 'string',
            description: 'Version number (e.g., "v1.2.0")',
          },
        },
        required: ['tasks'],
      },
      async execute(args) {
        const tasks = Array.isArray(args.tasks) ? args.tasks : []
        const version = args.version || 'Unreleased'
        const notes = tasks.map((task: string) => `- ${task}`).join('\n')
        return `# Release Notes - ${version}\n\n${notes}\n\n*Generated by Builder Agent*`
      },
    },
    {
      name: 'draft_post',
      description: 'Generate a new blog post draft with frontmatter and content structure',
      parameters: {
        type: 'object',
        properties: {
          title: {
            type: 'string',
            description: 'Post title',
          },
          description: {
            type: 'string',
            description: 'Post description/excerpt',
          },
          tags: {
            type: 'array',
            items: { type: 'string' },
            description: 'Array of tags',
          },
          templateId: {
            type: 'string',
            description: 'Template ID to use (e.g., "shader-hero", "particle-scroll")',
          },
        },
        required: ['title', 'description'],
      },
      async execute(args) {
        const { title, description, tags = [], templateId = 'default' } = args
        const slug = title
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/^-|-$/g, '')
        
        const now = new Date().toISOString().split('T')[0]
        
        const frontmatter = `---
slug: ${slug}
title: "${title}"
description: "${description}"
publishedAt: "${now}"
tags: [${tags.map((t: string) => `"${t}"`).join(', ')}]
templateId: "${templateId}"
---

# ${title}

${description}

<TemplateLoader templateId="${templateId}" props={{
  title: "${title}",
  // Add template-specific props here
}} />

## Content Section

Start writing your content here...
`
        return `Post draft created:\n\`\`\`mdx\n${frontmatter}\n\`\`\``
      },
    },
    {
      name: 'apply_template',
      description: 'Apply a specific template to a content section with given props',
      parameters: {
        type: 'object',
        properties: {
          templateId: {
            type: 'string',
            description: 'Template ID from registry',
          },
          props: {
            type: 'object',
            description: 'Template props as JSON',
          },
        },
        required: ['templateId', 'props'],
      },
      async execute(args) {
        const { templateId, props } = args
        const templates = getAllTemplates()
        const template = templates.find(t => t.id === templateId)
        
        if (!template) {
          return `Error: Template "${templateId}" not found. Available: ${templates.map(t => t.id).join(', ')}`
        }
        
        const propsJson = JSON.stringify(props, null, 2)
        const mdx = `<TemplateLoader templateId="${templateId}" props={${propsJson}} />`
        
        return `Template applied:\n\`\`\`mdx\n${mdx}\n\`\`\``
      },
    },
    {
      name: 'generate_variants',
      description: 'Generate multiple variants of a template with different configurations',
      parameters: {
        type: 'object',
        properties: {
          templateId: {
            type: 'string',
            description: 'Base template ID',
          },
          variantCount: {
            type: 'number',
            description: 'Number of variants to generate',
          },
        },
        required: ['templateId'],
      },
      async execute(args) {
        const { templateId, variantCount = 3 } = args
        const templates = getAllTemplates()
        const template = templates.find(t => t.id === templateId)
        
        if (!template) {
          return `Error: Template "${templateId}" not found`
        }
        
        const variants = []
        for (let i = 0; i < variantCount; i++) {
          variants.push({
            name: `${template.name} Variant ${i + 1}`,
            props: {
              // Generate different prop combinations based on schema
              variant: i + 1,
            },
          })
        }
        
        return `Generated ${variantCount} variants for ${template.name}:\n${JSON.stringify(variants, null, 2)}`
      },
    },
    {
      name: 'list_templates',
      description: 'List all available content templates',
      parameters: {
        type: 'object',
        properties: {},
      },
      async execute() {
        const templates = getAllTemplates()
        const list = templates
          .map(t => `- **${t.id}**: ${t.description}`)
          .join('\n')
        
        return `Available templates:\n\n${list}`
      },
    },
    {
      name: 'confirm_and_pr',
      description: 'Confirm changes and prepare PR summary',
      parameters: {
        type: 'object',
        properties: {
          changes: {
            type: 'array',
            items: { type: 'string' },
            description: 'List of changes made',
          },
          prTitle: {
            type: 'string',
            description: 'Pull request title',
          },
        },
        required: ['changes', 'prTitle'],
      },
      async execute(args) {
        const { changes, prTitle } = args
        const changeList = changes.map((c: string) => `- ${c}`).join('\n')
        
        const prBody = `## Changes

${changeList}

## Testing
- [ ] Visual regression tests pass
- [ ] WebGPU features work as expected
- [ ] No console errors
- [ ] Performance is acceptable

## Screenshots
<!-- Add screenshots if applicable -->

---
*Generated by Builder Agent*`
        
        return `PR Summary:\n**${prTitle}**\n\n${prBody}`
      },
    },
  ],
})

